custom:
  esbuild:
    config: './config.js'
  email: "chivekrodis@gmail.com"

service: product

frameworkVersion: '3'

useDotenv: true

provider:
  name: aws
  stage: dev
  runtime: nodejs18.x
  region: eu-west-1
  httpApi:
    cors: true

  iam:
    role:
      statements:
        - Effect: Allow
          Action: 'dynamodb:*'
          Resource:
            - arn:aws:dynamodb:eu-west-1:*:table/products
            - arn:aws:dynamodb:eu-west-1:*:table/stocks
        - Effect: Allow
          Action: "sqs:*"
          Resource:
            - Fn::GetAtt: [ SQSQueue, Arn ]
        - Effect: Allow
          Action: "sns:*"
          Resource: !Ref SNSTopic
  environment:
    PRODUCTS_TABLE_NAME: ${env:PRODUCTS_TABLE_NAME}
    STOCKS_TABLE_NAME: ${env:STOCKS_TABLE_NAME}
    SQS_URL:
      Ref: SQSQueue
    SNS_ARN:
      Ref: SNSTopic

plugins:
  - serverless-esbuild

package:
  individually: true

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  getProductsList:
    handler: getProductsList/index.getProductsList
    events:
      - httpApi:
          path: /product/available
          method: get
  getProductsById:
    handler: getProductsById/index.getProductsById
    events:
      - httpApi:
          path: /product/{id}
          method: get
  createProduct:
    handler: createProduct/index.createProduct
    events:
      - httpApi:
          path: /product
          method: post
  catalogBatchProcess:
    handler: catalogBatchProcess/index.catalogBatchProcess
    events:
      - sqs:
          arn:
            Fn::GetAtt: [ SQSQueue, Arn ]
          batchSize: 5

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

resources:
  Resources:
    productsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.PRODUCTS_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    stockssTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.STOCKS_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: product_id
            AttributeType: S
        KeySchema:
          - AttributeName: product_id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalogItemsQueue
    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: createProductTopic
    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${self:custom.email}
        Protocol: email
        TopicArn: !Ref SNSTopic
  Outputs:
    sqsUrl:
      Value:
        Ref: SQSQueue
      Export:
        Name: !Sub sqsUrl
    sqsArn:
      Value:
        Fn::GetAtt: [ SQSQueue, Arn ]
      Export:
        Name: !Sub sqsArn
